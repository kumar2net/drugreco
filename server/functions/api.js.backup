const express = require('express');
const cors = require('cors');
const serverless = require('serverless-http');
const knex = require('knex');
const knexConfig = require('../knexfile.js');

const app = express();
app.use(cors());
app.use(express.json());

// Use the knex configuration based on environment
const environment = process.env.NODE_ENV || 'development';
const db = knex(knexConfig[environment]);

app.get('/api/drugs', async (req, res) => {
  try {
    const drugs = await db('drugs').select('*');
    res.json(drugs.map(drug => ({
      ...drug,
      sideEffects: typeof drug.sideEffects === 'string' ? JSON.parse(drug.sideEffects) : drug.sideEffects,
      alternatives: typeof drug.alternatives === 'string' ? JSON.parse(drug.alternatives) : drug.alternatives
    })));
  } catch (err) {
    res.status(500).json({ message: "Error fetching drugs", error: err.message });
  }
});

app.get('/api/search', async (req, res) => {
  const { query, category } = req.query;
  try {
    let dbQuery = db('drugs');
    if (category && category !== 'all') {
      dbQuery = dbQuery.where({ category });
    }
    if (query) {
      dbQuery = dbQuery.where('name', 'like', `%${query}%`);
    }
    const drugs = await dbQuery.select('*');
    res.json(drugs.map(drug => ({
      ...drug,
      sideEffects: typeof drug.sideEffects === 'string' ? JSON.parse(drug.sideEffects) : drug.sideEffects,
      alternatives: typeof drug.alternatives === 'string' ? JSON.parse(drug.alternatives) : drug.alternatives
    })));
  } catch (err) {
    res.status(500).json({ message: "Error searching drugs", error: err.message });
  }
});

app.get('/api/categories', async (req, res) => {
  try {
    const categories = await db('drugs').distinct('category').orderBy('category');
    res.json(['all', ...categories.map(c => c.category)]);
  } catch (err) {
    res.status(500).json({ message: "Error fetching categories", error: err.message });
  }
});

app.get('/api/trending', async (req, res) => {
  try {
    const trending = await db('drugs').orderBy('price', 'desc').limit(5);
    res.json(trending.map(drug => ({
      ...drug,
      sideEffects: typeof drug.sideEffects === 'string' ? JSON.parse(drug.sideEffects) : drug.sideEffects,
      alternatives: typeof drug.alternatives === 'string' ? JSON.parse(drug.alternatives) : drug.alternatives
    })));
  } catch (err) {
    res.status(500).json({ message: "Error fetching trending drugs", error: err.message });
  }
});

app.get('/api/stats', async (req, res) => {
  try {
    const stats = await db('drugs')
      .select('category')
      .count('* as count')
      .avg('price as avgPrice')
      .groupBy('category');
    res.json(stats);
  } catch (err) {
    res.status(500).json({ message: "Error fetching stats", error: err.message });
  }
});

app.post('/api/drugs/by-names', async (req, res) => {
  const { names } = req.body;
  if (!names || !Array.isArray(names)) {
    return res.status(400).json({ message: '`names` must be an array of drug names.' });
  }

  try {
    const drugs = await db('drugs').whereIn('name', names);
    res.json(drugs.map(drug => ({
      ...drug,
      sideEffects: typeof drug.sideEffects === 'string' ? JSON.parse(drug.sideEffects) : drug.sideEffects,
      alternatives: typeof drug.alternatives === 'string' ? JSON.parse(drug.alternatives) : drug.alternatives
    })));
  } catch (err) {
    res.status(500).json({ message: 'Error fetching drugs by names', error: err.message });
  }
});

module.exports = app;
module.exports.handler = serverless(app); 